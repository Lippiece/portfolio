---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import { Octokit } from "octokit";
import { Just, Maybe, Nothing, identity } from "purify-ts";
type Repository = {
  id: {
    type: "integer";
    examples: [1296269];
  };
  node_id: {
    type: "string";
    examples: ["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"];
  };
  name: {
    type: "string";
    examples: ["Hello-World"];
  };
  full_name: {
    type: "string";
    examples: ["octocat/Hello-World"];
  };
  owner: {
    title: "Simple User";
    description: "A GitHub user.";
    type: "object";
    properties: {
      name: {
        type: ["string", "null"];
      };
      email: {
        type: ["string", "null"];
      };
      login: {
        type: "string";
        examples: ["octocat"];
      };
      id: {
        type: "integer";
        examples: [1];
      };
      node_id: {
        type: "string";
        examples: ["MDQ6VXNlcjE="];
      };
      avatar_url: {
        type: "string";
        format: "uri";
        examples: ["https://github.com/images/error/octocat_happy.gif"];
      };
      gravatar_id: {
        type: ["string", "null"];
        examples: ["41d064eb2195891e12d0413f63227ea7"];
      };
      url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat"];
      };
      html_url: {
        type: "string";
        format: "uri";
        examples: ["https://github.com/octocat"];
      };
      followers_url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat/followers"];
      };
      following_url: {
        type: "string";
        examples: [
          "https://api.github.com/users/octocat/following{/other_user}",
        ];
      };
      gists_url: {
        type: "string";
        examples: ["https://api.github.com/users/octocat/gists{/gist_id}"];
      };
      starred_url: {
        type: "string";
        examples: [
          "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        ];
      };
      subscriptions_url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat/subscriptions"];
      };
      organizations_url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat/orgs"];
      };
      repos_url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat/repos"];
      };
      events_url: {
        type: "string";
        examples: ["https://api.github.com/users/octocat/events{/privacy}"];
      };
      received_events_url: {
        type: "string";
        format: "uri";
        examples: ["https://api.github.com/users/octocat/received_events"];
      };
      type: {
        type: "string";
        examples: ["User"];
      };
      site_admin: {
        type: "boolean";
      };
      starred_at: {
        type: "string";
        examples: ['"2020-07-09T00:17:55Z"'];
      };
    };
    required: [
      "avatar_url",
      "events_url",
      "followers_url",
      "following_url",
      "gists_url",
      "gravatar_id",
      "html_url",
      "id",
      "node_id",
      "login",
      "organizations_url",
      "received_events_url",
      "repos_url",
      "site_admin",
      "starred_url",
      "subscriptions_url",
      "type",
      "url",
    ];
  };
  private: {
    type: "boolean";
  };
  html_url: {
    type: "string";
    format: "uri";
    examples: ["https://github.com/octocat/Hello-World"];
  };
  description: {
    type: ["string", "null"];
    examples: ["This your first repo!"];
  };
  fork: {
    type: "boolean";
  };
  url: {
    type: "string";
    format: "uri";
    examples: ["https://api.github.com/repos/octocat/Hello-World"];
  };
  archive_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    ];
  };
  assignees_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    ];
  };
  blobs_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    ];
  };
  branches_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    ];
  };
  collaborators_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    ];
  };
  comments_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
    ];
  };
  commits_url: {
    type: "string";
    examples: ["http://api.github.com/repos/octocat/Hello-World/commits{/sha}"];
  };
  compare_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    ];
  };
  contents_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    ];
  };
  contributors_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/contributors"];
  };
  deployments_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/deployments"];
  };
  downloads_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/downloads"];
  };
  events_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/events"];
  };
  forks_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/forks"];
  };
  git_commits_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    ];
  };
  git_refs_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    ];
  };
  git_tags_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    ];
  };
  git_url: {
    type: "string";
  };
  issue_comment_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    ];
  };
  issue_events_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    ];
  };
  issues_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
    ];
  };
  keys_url: {
    type: "string";
    examples: ["http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"];
  };
  labels_url: {
    type: "string";
    examples: ["http://api.github.com/repos/octocat/Hello-World/labels{/name}"];
  };
  languages_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/languages"];
  };
  merges_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/merges"];
  };
  milestones_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    ];
  };
  notifications_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    ];
  };
  pulls_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    ];
  };
  releases_url: {
    type: "string";
    examples: ["http://api.github.com/repos/octocat/Hello-World/releases{/id}"];
  };
  ssh_url: {
    type: "string";
  };
  stargazers_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/stargazers"];
  };
  statuses_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    ];
  };
  subscribers_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/subscribers"];
  };
  subscription_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/subscription"];
  };
  tags_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/tags"];
  };
  teams_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/teams"];
  };
  trees_url: {
    type: "string";
    examples: [
      "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    ];
  };
  clone_url: {
    type: "string";
  };
  mirror_url: {
    type: ["string", "null"];
  };
  hooks_url: {
    type: "string";
    format: "uri";
    examples: ["http://api.github.com/repos/octocat/Hello-World/hooks"];
  };
  svn_url: {
    type: "string";
  };
  homepage: {
    type: ["string", "null"];
  };
  language: {
    type: ["string", "null"];
  };
  forks_count: {
    type: "integer";
  };
  stargazers_count: {
    type: "integer";
  };
  watchers_count: {
    type: "integer";
  };
  size: {
    description: "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.";
    type: "integer";
  };
  default_branch: {
    type: "string";
  };
  open_issues_count: {
    type: "integer";
  };
  is_template: {
    type: "boolean";
  };
  topics: {
    type: "array";
    items: {
      type: "string";
    };
  };
  has_issues: {
    type: "boolean";
  };
  has_projects: {
    type: "boolean";
  };
  has_wiki: {
    type: "boolean";
  };
  has_pages: {
    type: "boolean";
  };
  has_downloads: {
    type: "boolean";
  };
  has_discussions: {
    type: "boolean";
  };
  archived: {
    type: "boolean";
  };
  disabled: {
    type: "boolean";
  };
  visibility: {
    type: "string";
  };
  pushed_at: {
    type: ["string", "null"];
    format: "date-time";
    examples: ["2011-01-26T19:06:43Z"];
  };
  created_at: {
    type: ["string", "null"];
    format: "date-time";
    examples: ["2011-01-26T19:01:12Z"];
  };
  updated_at: {
    type: ["string", "null"];
    format: "date-time";
    examples: ["2011-01-26T19:14:43Z"];
  };
  permissions: {
    type: "object";
    properties: {
      admin: {
        type: "boolean";
      };
      maintain: {
        type: "boolean";
      };
      push: {
        type: "boolean";
      };
      triage: {
        type: "boolean";
      };
      pull: {
        type: "boolean";
      };
    };
  };
  role_name: {
    type: "string";
    examples: ["admin"];
  };
  temp_clone_token: {
    type: "string";
  };
  delete_branch_on_merge: {
    type: "boolean";
  };
  subscribers_count: {
    type: "integer";
  };
  network_count: {
    type: "integer";
  };
  code_of_conduct: {
    title: "Code Of Conduct";
    description: "Code Of Conduct";
    type: "object";
    properties: {
      key: {
        type: "string";
        examples: ["contributor_covenant"];
      };
      name: {
        type: "string";
        examples: ["Contributor Covenant"];
      };
      url: {
        type: "string";
        format: "uri";
        examples: [
          "https://api.github.com/codes_of_conduct/contributor_covenant",
        ];
      };
      body: {
        type: "string";
        examples: [
          "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n",
        ];
      };
      html_url: {
        type: ["string", "null"];
        format: "uri";
      };
    };
    required: ["url", "html_url", "key", "name"];
  };
  license: {
    type: ["object", "null"];
    properties: {
      key: {
        type: "string";
      };
      name: {
        type: "string";
      };
      spdx_id: {
        type: "string";
      };
      url: {
        type: "string";
      };
      node_id: {
        type: "string";
      };
    };
  };
  forks: {
    type: "integer";
    examples: [0];
  };
  open_issues: {
    type: "integer";
    examples: [0];
  };
  watchers: {
    type: "integer";
    examples: [0];
  };
  allow_forking: {
    type: "boolean";
  };
  web_commit_signoff_required: {
    type: "boolean";
    examples: [false];
  };
  security_and_analysis: {
    type: ["object", "null"];
    properties: {
      advanced_security: {
        type: "object";
        properties: {
          status: {
            type: "string";
            enum: ["enabled", "disabled"];
          };
        };
      };
      dependabot_security_updates: {
        description: "Enable or disable Dependabot security updates for the repository.";
        type: "object";
        properties: {
          status: {
            description: "The enablement status of Dependabot security updates for the repository.";
            type: "string";
            enum: ["enabled", "disabled"];
          };
        };
      };
      secret_scanning: {
        type: "object";
        properties: {
          status: {
            type: "string";
            enum: ["enabled", "disabled"];
          };
        };
      };
      secret_scanning_push_protection: {
        type: "object";
        properties: {
          status: {
            type: "string";
            enum: ["enabled", "disabled"];
          };
        };
      };
    };
  };
};
const octokit = new Octokit({
  auth: import.meta.env.GH,
});
const repositories = await octokit.request("GET /users/Lippiece/repos", {
  username: "Lippiece",
});
---

<Layout title="Welcome to Astro.">
  <main>
    <svg
      class="astro-a"
      width="495"
      height="623"
      viewBox="0 0 495 623"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
    >
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M167.19 364.254C83.4786 364.254 0 404.819 0 404.819C0 404.819 141.781 19.4876 142.087 18.7291C146.434 7.33701 153.027 0 162.289 0H332.441C341.703 0 348.574 7.33701 352.643 18.7291C352.92 19.5022 494.716 404.819 494.716 404.819C494.716 404.819 426.67 364.254 327.525 364.254L264.41 169.408C262.047 159.985 255.147 153.581 247.358 153.581C239.569 153.581 232.669 159.985 230.306 169.408L167.19 364.254ZM160.869 530.172C160.877 530.18 160.885 530.187 160.894 530.195L160.867 530.181C160.868 530.178 160.868 530.175 160.869 530.172ZM136.218 411.348C124.476 450.467 132.698 504.458 160.869 530.172C160.997 529.696 161.125 529.242 161.248 528.804C161.502 527.907 161.737 527.073 161.917 526.233C165.446 509.895 178.754 499.52 195.577 500.01C211.969 500.487 220.67 508.765 223.202 527.254C224.141 534.12 224.23 541.131 224.319 548.105C224.328 548.834 224.337 549.563 224.347 550.291C224.563 566.098 228.657 580.707 237.264 593.914C245.413 606.426 256.108 615.943 270.749 622.478C270.593 621.952 270.463 621.508 270.35 621.126C270.045 620.086 269.872 619.499 269.685 618.911C258.909 585.935 266.668 563.266 295.344 543.933C298.254 541.971 301.187 540.041 304.12 538.112C310.591 533.854 317.059 529.599 323.279 525.007C345.88 508.329 360.09 486.327 363.431 457.844C364.805 446.148 363.781 434.657 359.848 423.275C358.176 424.287 356.587 425.295 355.042 426.275C351.744 428.366 348.647 430.33 345.382 431.934C303.466 452.507 259.152 455.053 214.03 448.245C184.802 443.834 156.584 436.019 136.218 411.348Z"
        fill="url(#paint0_linear_1805_24383)"></path>
      <defs>
        <linearGradient
          id="paint0_linear_1805_24383"
          x1="247.358"
          y1="0"
          x2="247.358"
          y2="622.479"
          gradientUnits="userSpaceOnUse"
        >
          <stop stop-opacity="0.9"></stop>
          <stop offset="1" stop-opacity="0.2"></stop>
        </linearGradient>
      </defs>
    </svg>
    <h1>Repositories</h1>
    <ul role="list" class="link-card-grid">
      {
        repositories.data
          .filter((repository: Repository) => repository.description)
          .map((repository: Repository, index: number) => (
            <Card
              href={repository.html_url}
              title={repository.name}
              body={repository.description}
              preview={repository.homepage}
            />
          ))
      }
    </ul>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
